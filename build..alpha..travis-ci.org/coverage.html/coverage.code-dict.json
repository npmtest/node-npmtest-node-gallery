{"/home/travis/build/npmtest/node-npmtest-node-gallery/test.js":"/* istanbul instrument in package npmtest_node_gallery */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-gallery/lib.npmtest_node_gallery.js":"/* istanbul instrument in package npmtest_node_gallery */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_gallery = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_gallery = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-gallery/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-gallery && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_gallery */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_gallery\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_gallery.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_gallery.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_gallery.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_gallery.__dirname + '/lib.npmtest_node_gallery.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-gallery/node_modules/node-gallery/lib/gallery.js":"var common;\n\nmodule.exports = function(config){\n  if (!config){\n    throw new Error('No config specified');\n  }\n  \n  if (!config.staticFiles || !config.urlRoot){\n    throw new Error('Both staticFiles and urlRoot must be specified');\n  }\n  \n  var common = require('./common')(config), \n  middleware;\n  \n  // Remove any potential trailing or leading / from our paths\n  config.staticFiles = common.friendlyPath(config.staticFiles);\n  config.urlRoot = common.friendlyPath(config.urlRoot);\n  \n  middleware = require('./middleware')(config);\n  \n  return middleware;\n  \n};\n","/home/travis/build/npmtest/node-npmtest-node-gallery/node_modules/node-gallery/lib/album.js":"var fs = require('fs'),\npath = require('path'),\ncache = require('memory-cache'),\nisPhoto = /(\\.(jpg|bmp|jpeg|gif|png|tif))$/i,\n_ = require('underscore'),\ncommon,\nconfig;\n\nmodule.exports = function(cfg){\n  config = cfg;\n  common = require('./common')(config);\n  return function(req, res, next){\n    \n    // Retrieve the path, decoding %20s etc, replacing leading & trailing slash\n    var pathFromReq = common.friendlyPath(req.path),\n    staticFilesPath = './' + path.join(config.staticFiles, pathFromReq),\n    data = _.clone(config);\n    \n    /*\n     Request for an album thumbnail - TODO consider splitting out\n     */\n    if (req.query && req.query.tn){\n      return _thumbnail(staticFilesPath, pathFromReq, function(err, thumb){\n        if (err){\n          return common.error(req, res, next, 404, 'No thumbnail found for this album', err);\n        }\n        var fstream = fs.createReadStream(path.join(thumb));\n        fstream.on('error', function(err){\n          return common.error(req, res, next, 404, 'No thumbnail found for this album', err);\n        });\n        return fstream.pipe(res);\n      });\n    }\n    /*\n      Determined we're not requesting the thumbnail file - render the album page\n     */\n    fs.readdir(staticFilesPath, function (err, files) { \n      if (err){\n        return common.error(req, res, next, 404, 'No album found', err);\n      }\n      \n      data.isRoot = (req.path === '/' || req.path === '');\n      data.breadcrumb = common.breadcrumb(pathFromReq),\n      data.name = _.last(data.breadcrumb).name || config.title;\n      \n      data.albums = _getAlbums(files, staticFilesPath, pathFromReq);\n      data.photos = _getPhotos(files, staticFilesPath, pathFromReq);\n      \n      req.data = data;\n      req.tpl = 'album.ejs';\n      return next();\n    });\n  }\n}\n\nfunction _getAlbums(files, staticFilesPath, pathFromReq){\n  files = _.filter(files, function(file){\n    var stat = fs.statSync(path.join(staticFilesPath, file));\n    return stat.isDirectory()\n  });\n  \n  files = _.map(files, function(albumName){\n    return {\n      url : path.join(config.urlRoot, pathFromReq, albumName),\n      name : albumName\n    };\n  });\n  return files;\n}\n\nfunction _getPhotos(files, staticFilesPath, pathFromReq){\n  files = _.filter(files, function(file){\n    var stat = fs.statSync(path.join(staticFilesPath, file));\n    return file.match(isPhoto) && !stat.isDirectory()\n  });\n  files = _.map(files, function(photoFileName){\n    var photoName = photoFileName.replace(isPhoto, '');\n    return {\n      url : path.join(config.urlRoot, pathFromReq, 'photo', photoName),\n      src : path.join(config.urlRoot, pathFromReq, photoFileName),\n      path : path.join(pathFromReq, photoFileName),\n      name : photoName\n    };\n  });\n  return files;\n}\n\nfunction _thumbnail(albumPath, pathFromRequest, cb){\n  var cached = cache.get(albumPath);\n  if (cached){\n    return cb(null, cached);\n  }\n\n  \n  // TODO - This is a bit messy - reduce number of params we need to pass\n  fs.readdir(albumPath, function (err, files) {\n    var photos = _getPhotos(files, albumPath, pathFromRequest),\n    albums = _getAlbums(files, albumPath, pathFromRequest);\n    if (photos.length > 0){\n      // We have a photo, let's return the first as the thumb\n      var firstPhoto = _.first(photos).path;\n      firstPhoto = path.join(config.staticFiles, firstPhoto);\n      \n      cache.put(albumPath, firstPhoto);\n      return cb(null, firstPhoto)\n    }else if (albums.length > 0){\n      // No photos found - iterate thru the albums and find a suitable child to return\n      // TODO: If this first sub-album is empty this will fail. Is this OK?\n      var firstAlbum = _.first(albums).name;\n      return _thumbnail(path.join(albumPath, firstAlbum), path.join(pathFromRequest, firstAlbum), cb);\n    }else{\n      // None exist\n      return cb('No suitable thumbnail found');  \n    }\n    \n  });\n}\n","/home/travis/build/npmtest/node-npmtest-node-gallery/node_modules/node-gallery/lib/common.js":"var _ = require('underscore'),\npath = require('path'),\nejs = require('ejs'),\nfs = require('fs'),\nconfig;\n\nmodule.exports = function(cfg){\n  config = cfg;\n  return common;\n};\n\nvar common = {};\n\ncommon.breadcrumb = function(paths){\n  paths = paths.split('/');\n  var breadcrumb = [{\n    name : config.title || 'Gallery',\n    url : config.urlRoot\n  }],\n  joined = '';\n  breadcrumb = breadcrumb.concat(_.map(paths, function(pathSeg){\n    joined = path.join(joined, pathSeg);\n    return {\n      name : pathSeg,\n      url : path.join(config.urlRoot, joined)\n    }\n  }));\n  return breadcrumb;\n}\n\ncommon.friendlyPath = function(unfriendlyPath){\n  return decodeURI(unfriendlyPath).replace(/^\\//, '').replace(/\\/$/, '');\n}\n\ncommon.error = function(req, res, next, status, message, errorObject){\n  if (config.render === false){\n    return next(JSON.stringify({ message : message, error : errorObject}));\n  }\n  return res.status(404).json({ message : message, error : errorObject});\n};\n\ncommon.render = function(req, res, next){\n  var data = req.data,\n  tpl = req.tpl;\n  if (config.render === false){\n    // only return compiled template file\n    return fs.readFile(path.join(__dirname, '..', 'views', tpl), function(err, tplContents){\n      if (err){\n        return next(err);\n      }\n      try{\n        req.html = ejs.render(tplContents.toString(), data);\n      }catch(err){\n        return next(err);\n      }\n      return next();  \n    });\n  }\n  \n  if (req.accepts('html')){\n    return res.render(tpl, data);  \n  }else{\n    return res.json(data);\n  }\n  \n}\n","/home/travis/build/npmtest/node-npmtest-node-gallery/node_modules/node-gallery/lib/exif.js":"var ExifImage = require('exif').ExifImage;\n\n/*\n * Utility function to convert exif data into something a bit more consumable\n * by a template\n */\nvar exif = function(staticPath, callback){\n  try {\n    new ExifImage({\n      image : staticPath//'resources/photos/Ireland/West Coast/_MG_4174.jpg'\n    }, function (error, data) {\n\n      if (error){\n        return callback(error);\n      }else{\n        var exifMap = {};\n        var image = data.image,\n        exif = data.exif,\n        gps = data.gps,\n        arrays = image.concat(exif, gps);\n\n        for (var i=0; i<arrays.length; i++){\n          var t = arrays[i],\n          careAbout = { // what props we're interested in, and what we call them in output, rather than silly exif-ey names\n            \"Make\" : \"Make\",\n            \"Model\" : \"Model\",\n            \"DateTimeOriginal\" : \"Time\",\n            \"ApertureValue\" : \"aperture\",\n            \"FocalLength\" : \"focalLength\",\n            \"ISOSpeedRatings\" : \"ISO\",\n            \"ExposureTime\" : \"Shutter Speed\",\n            \"GPSLatitude\" : \"Lat\",\n            \"GPSLongitude\" : \"Long\",\n            \"ImageDescription\" : \"Description\"\n          };\n          if (careAbout.hasOwnProperty(t.tagName)){\n            var key = careAbout[t.tagName],\n            value = t.value;\n\n            if (key == \"Shutter Speed\"){\n              // Transform shutter speed to a fraction\n              value = dec2frac(value);\n            }\n            if (typeof value==\"number\"){\n              value = Math.round(value*100)/100; // no long decimals\n            }\n            exifMap[key] = value;\n          }\n        }\n        return callback(null, exifMap);\n      }\n    });\n  } catch (error) {\n    return callback(error);\n  }\n}\n\n// source: http://stackoverflow.com/questions/95727/how-to-convert-floats-to-human-readable-fractions\nfunction dec2frac(d) {\n\n  var df = 1;\n  var top = 1;\n  var bot = 1;\n\n  while (df != d) {\n    if (df < d) {\n      top += 1;\n    }\n    else {\n      bot += 1;\n      top = parseInt(d * bot);\n    }\n    df = top / bot;\n  }\n  return top + '/' + bot;\n}\n\nmodule.exports = exif;\n","/home/travis/build/npmtest/node-npmtest-node-gallery/node_modules/node-gallery/lib/middleware.js":"var express = require('express'),\nfs = require('fs'),\npath = require('path'),\ncrypto = require('crypto'),\ncache = require('memory-cache'),\nim = require('imagemagick-stream'),\ncommon;\n\nmodule.exports = function(config){\n  var app = express(),\n  staticFiles = config.staticFiles,\n  common = require('./common')(config),\n  album = require('./album')(config),\n  photo = require('./photo')(config);\n  \n  app.set('views', path.join(__dirname, '..', 'views'));\n  app.set('view engine', 'ejs');\n  \n  \n  app.get('/gallery.css', function(req, res, next){\n    var fstream = fs.createReadStream(path.join(__dirname, '..', 'css/gallery.css'));\n    res.type('text/css');\n    fstream.on('error', function(err){\n      return common.error(req, res, next, 404, 'CSS File not found', err);\n    });\n    return fstream.pipe(res);\n  });\n  \n  // Photo Page\n  app.get(/.+(\\.(jpg|bmp|jpeg|gif|png|tif)(\\?tn=(1|0))?)$/i, function(req, res, next){\n    var filePath = path.join(staticFiles, req.path),\n    fstream;\n    \n    filePath = decodeURI(filePath);\n    \n    fs.stat(filePath, function(err){\n      if (err){\n        return common.error(req, res, next, 404, 'File not found', err);\n      }\n      fstream = fs.createReadStream(filePath);\n      fstream.on('error', function(err){\n        return common.error(req, res, next, 404, 'File not found', err);\n      });\n      \n      if (!req.query.tn){\n        // return the full size file\n        return fstream.pipe(res);\n      }else{\n        // streaming resize our file\n        var cachedResizedKey, cacheWriteStream, cachedResult,\n        resizer, dimensions, w, h;\n        if (req.query.tn.toString() === '1'){\n          w = (config.thumbnail && config.thumbnail.width) || 200;\n          h = (config.thumbnail && config.thumbnail.height) || 200;\n          dimensions = w + 'x' + h;\n        }else {\n          w = (config.image && config.image.width) || '100%';\n          h = (config.image && config.image.height) || '100%';\n          dimensions = w + 'x' + h;\n        }\n        \n        cachedResizedKey = filePath + dimensions;\n        cachedResizedKey = crypto.createHash('md5').update(cachedResizedKey).digest('hex');\n        \n        // Check the cache for a previously rezized tn of matching file path and dimensions\n        cachedResult = cache.get(cachedResizedKey)\n        // TODO - eventualyl should just try the fs.read on cachedResult, existsSync is a bad hack\n        if (cachedResult && fs.existsSync(cachedResult)){\n          // cache hit - read & return\n          var cacheReadStream = fs.createReadStream(cachedResult);\n          cacheReadStream.on('error', function(){\n            return common.error(req, res, next, 404, 'File not found', err);\n          });\n          return cacheReadStream.pipe(res);  \n        }\n        \n        // No result, create a write stream so we don't have to reize this image again\n        cacheWritePath = path.join('/tmp', cachedResizedKey);\n        cacheWriteStream = fs.createWriteStream(cacheWritePath);\n        \n        \n        \n        resizer = im().resize(dimensions).quality(40);\n        resizer.on('error', function(err){\n          return common.error(req, res, next, 500, 'Error in IM/GM converting file', err);\n        });\n        \n        var resizestream = fstream.pipe(resizer);\n        \n        // Pipe to our tmp cache file, so we can use this in future\n        resizestream.pipe(cacheWriteStream);\n        cache.put(cachedResizedKey, cacheWritePath);\n        \n        // Also stream the resized result back to the requestee\n        return resizestream.pipe(res);\n      }\n    });\n    \n  });\n  \n  // Photo Pages - anything containing */photo/*\n  app.get(/(.+\\/)?photo\\/(.+)/i, photo, common.render);\n  // Album Page - everything that doesn't contain the photo string\n  // regex source http://stackoverflow.com/questions/406230/regular-expression-to-match-string-not-containing-a-word\n  app.get(/^((?!\\/photo\\/).)*$/, album, common.render);\n  return app;\n}\n","/home/travis/build/npmtest/node-npmtest-node-gallery/node_modules/node-gallery/lib/photo.js":"var fs = require('fs'),\npath = require('path'),\n_ = require('underscore'),\nexif = require('./exif'),\ncommon;\n\nmodule.exports = function(config){\n  common = require('./common')(config);\n  return function(req, res, next){\n    var albumPath = req.params[0] || '', // This CAN be undefined, if a photo exists at root\n    photoName = req.params[1] || '',\n    photoBreadcrumbPath = path.join(albumPath, photoName), // Path for breadcrumb mostly\n    albumFilesystemPath = './' + path.join(config.staticFiles, albumPath),\n    photoFileSystemPath,\n    photoWebPath;\n    fs.readdir(albumFilesystemPath, function(err, files){\n      if (err || _.isEmpty(files)){\n        return common.error(req, res, next, 404, 'Photo not found', err);\n      }\n      var file = _.find(files, function(file){\n        return file.indexOf(photoName) > -1;\n      });\n      if (!file){\n        return common.error(req, res, next, 404, 'Photo not found', {});\n      }\n      // Include the /gallery/ or whatever\n      photoWebPath = path.join(config.urlRoot, albumPath, file);\n      photoFileSystemPath = path.join(albumFilesystemPath, file);\n      \n      exif(photoFileSystemPath, function(exifErr, exifInfo){\n        if (exifErr){\n          // TODO: At least log these errors\n          // don't care about exif errors - they are frequent with malformed files\n          exifInfo = {}; \n        }\n        \n        req.tpl = 'photo.ejs';\n        req.data = _.extend(config, {\n          name : photoName, \n          breadcrumb : common.breadcrumb(common.friendlyPath(photoBreadcrumbPath)),\n          src : photoWebPath,\n          path : photoBreadcrumbPath,\n          exif : exifInfo\n        });\n        return next();\n      });\n    });\n    \n  }\n};\n"}